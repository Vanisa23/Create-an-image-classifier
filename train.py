# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W8gk8HaGbcsDNEJQtf5yB3dfcitcrI77
"""

import argparse
import torch
from torch import nn, optim
from torchvision import datasets, transforms, models
from collections import OrderedDict

def parse_args():
    parser = argparse.ArgumentParser(description="Train a new network on a dataset of images and save the model to a checkpoint")
    parser.add_argument("data_dir", metavar="data_dir", type=str, help="Path to the directory containing the image dataset")
    parser.add_argument("--save_dir", type=str, default=".", help="Directory where the trained model checkpoint will be saved")
    parser.add_argument("--arch", type=str, default="densenet121", choices=["densenet121", "resnet18"], help="Architecture of the model to be used")
    parser.add_argument("--hidden_units", type=int, default=512, help="Number of hidden units in the classifier")
    parser.add_argument("--learning_rate", type=float, default=0.001, help="Learning rate for training the model")
    parser.add_argument("--epochs", type=int, default=5, help="Number of epochs for training")
    parser.add_argument("--gpu", action="store_true", help="Use GPU for training if available")
    return parser.parse_args()

def main():
    args = parse_args()

    # Define data directories
    train_dir = args.data_dir + '/train'
    valid_dir = args.data_dir + '/valid'

    # Define transforms for the training and validation sets
    train_transforms = transforms.Compose([transforms.RandomRotation(30),
                                           transforms.RandomResizedCrop(224),
                                           transforms.RandomHorizontalFlip(),
                                           transforms.ToTensor(),
                                           transforms.Normalize([0.485, 0.456, 0.406],
                                                                [0.229, 0.224, 0.225])])

    valid_transforms = transforms.Compose([transforms.Resize(255),
                                           transforms.CenterCrop(224),
                                           transforms.ToTensor(),
                                           transforms.Normalize([0.485, 0.456, 0.406],
                                                                [0.229, 0.224, 0.225])])

    # Load the datasets with ImageFolder
    train_data = datasets.ImageFolder(train_dir, transform=train_transforms)
    valid_data = datasets.ImageFolder(valid_dir, transform=valid_transforms)

    # Define the dataloaders
    trainloader = torch.utils.data.DataLoader(train_data, batch_size=64, shuffle=True)
    validloader = torch.utils.data.DataLoader(valid_data, batch_size=32)

    # Define model architecture
    if args.arch == "densenet121":
        model = models.densenet121(pretrained=True)
        input_size = 1024  # Input size of the classifier in DenseNet121
    elif args.arch == "resnet18":
        model = models.resnet18(pretrained=True)
        input_size = 512  # Input size of the classifier in ResNet18
    else:
        print("Invalid model architecture. Please choose either 'densenet121' or 'resnet18'.")
        return

    # Freeze parameters so we don't backprop through them
    for param in model.parameters():
        param.requires_grad = False

    # Define a new, untrained feed-forward network as a classifier
    classifier = nn.Sequential(OrderedDict([
                              ('fc1', nn.Linear(input_size, args.hidden_units)),
                              ('relu', nn.ReLU()),
                              ('fc2', nn.Linear(args.hidden_units, 102)),
                              ('output', nn.LogSoftmax(dim=1))
                              ]))
    model.classifier = classifier

    # Define loss and optimizer
    criterion = nn.NLLLoss()
    optimizer = optim.Adam(model.classifier.parameters(), lr=args.learning_rate)

    # Move model to GPU if available
    device = torch.device("cuda" if args.gpu and torch.cuda.is_available() else "cpu")
    model.to(device)

    # Train the model
    print_every = 40
    steps = 0
    running_loss = 0
    for epoch in range(args.epochs):
        model.train()
        for inputs, labels in trainloader:
            steps += 1
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model.forward(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()

            if steps % print_every == 0:
                model.eval()
                valid_loss = 0
                accuracy = 0
                with torch.no_grad():
                    for inputs, labels in validloader:
                        inputs, labels = inputs.to(device), labels.to(device)
                        outputs = model.forward(inputs)
                        batch_loss = criterion(outputs, labels)
                        valid_loss += batch_loss.item()

                        # Calculate accuracy
                        ps = torch.exp(outputs)
                        top_p, top_class = ps.topk(1, dim=1)
                        equals = top_class == labels.view(*top_class.shape)
                        accuracy += torch.mean(equals.type(torch.FloatTensor)).item()

                print(f"Epoch {epoch+1}/{args.epochs}.. "
                      f"Train loss: {running_loss/print_every:.3f}..